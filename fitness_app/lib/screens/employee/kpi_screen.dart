
import 'package:flutter/material.dart';
import '../../services/mock_data/kpi_data.dart';
import '../../theme/app_colors.dart';
import '../../theme/app_text_styles.dart';
import '../../theme/app_styles.dart';
import '../../widgets/common_widgets.dart';

class EmployeeKpiScreen extends StatelessWidget {
  const EmployeeKpiScreen({super.key});

  @override
  Widget build(BuildContext context) {
    final kpiData = KpiData.employeeKpi;

    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: const Text('KPI –∏ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
        backgroundColor: Colors.white,
        elevation: 0,
        foregroundColor: AppColors.textPrimary,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –û–±—â–∞—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            _buildFinancialOverview(kpiData),
            const SizedBox(height: 20),

            // –û—Å–Ω–æ–≤–Ω—ã–µ KPI
            Text(
              '–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
              style: AppTextStyles.headline6.copyWith(
                color: AppColors.textPrimary,
              ),
            ),
            const SizedBox(height: 16),
            _buildMainKpiCards(kpiData),
            const SizedBox(height: 20),

            // –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            _buildSection(
              title: 'üéæ –¢–µ–Ω–Ω–∏—Å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
              child: Column(
                children: [
                  _buildKpiRow(
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                    '${kpiData['tennisStats']['individualTrainings']}',
                    Icons.sports_tennis,
                    AppColors.primary,
                  ),
                  _buildKpiRow(
                    '–ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
                    '${kpiData['tennisStats']['groupTrainings']}',
                    Icons.group,
                    AppColors.accent,
                  ),
                  _buildKpiRow(
                    '–ê—Ä–µ–Ω–¥–∞ –∫–æ—Ä—Ç–æ–≤',
                    '${kpiData['tennisStats']['courtsRented']}',
                    Icons.calendar_today,
                    AppColors.success,
                  ),
                  _buildKpiRow(
                    '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
                    '${kpiData['tennisStats']['avgTrainingDuration']} –º–∏–Ω',
                    Icons.timer,
                    AppColors.warning,
                  ),
                  _buildProgressRow(
                    '–ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–æ–≤',
                    kpiData['tennisStats']['studentProgress']['beginnerToIntermediate'] / 10,
                    '${kpiData['tennisStats']['studentProgress']['beginnerToIntermediate']} –ø–µ—Ä–µ—Ö–æ–¥–æ–≤',
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª
            _buildSection(
              title: 'üí™ –¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª',
              child: Column(
                children: [
                  _buildKpiRow(
                    '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã',
                    '${kpiData['gymStats']['individualPrograms']}',
                    Icons.fitness_center,
                    AppColors.primary,
                  ),
                  _buildKpiRow(
                    '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
                    '${kpiData['gymStats']['regularClients']}%',
                    Icons.people,
                    AppColors.success,
                  ),
                  _buildKpiRow(
                    '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é',
                    '${kpiData['gymStats']['nutritionConsultations']}',
                    Icons.restaurant,
                    AppColors.accent,
                  ),
                  _buildProgressRow(
                    '–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–π –∫–ª–∏–µ–Ω—Ç–æ–≤',
                    kpiData['gymStats']['clientProgress']['goalAchievement'] / 100,
                    '${kpiData['gymStats']['clientProgress']['goalAchievement']}%',
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            _buildSection(
              title: 'üë• –ì—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
              child: Column(
                children: [
                  _buildKpiRow(
                    '–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é',
                    '${kpiData['groupStats']['weeklyTrainings']}',
                    Icons.event,
                    AppColors.primary,
                  ),
                  _buildKpiRow(
                    '–°—Ä–µ–¥–Ω—è—è –Ω–∞–ø–æ–ª–Ω—è–µ–º–æ—Å—Ç—å',
                    '${kpiData['groupStats']['avgAttendance']} —á–µ–ª',
                    Icons.people_outline,
                    AppColors.success,
                  ),
                  _buildKpiRow(
                    '–ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏',
                    '${kpiData['groupStats']['newParticipants']}',
                    Icons.person_add,
                    AppColors.accent,
                  ),
                  _buildKpiRow(
                    '–§–æ—Ä–º–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
                    '${kpiData['groupStats']['trainingFormats']}',
                    Icons.format_list_bulleted,
                    AppColors.warning,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            _buildSection(
              title: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
              child: Column(
                children: [
                  _buildKpiRow(
                    '–ü—Ä–æ–¥–∞–∂–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤',
                    '${kpiData['financialStats']['membershipsSold']}',
                    Icons.credit_card,
                    AppColors.primary,
                  ),
                  _buildKpiRow(
                    '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
                    '${(kpiData['financialStats']['totalSales'] / 1000).toStringAsFixed(0)}K ‚ÇΩ',
                    Icons.attach_money,
                    AppColors.success,
                  ),
                  _buildKpiRow(
                    '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
                    '${kpiData['financialStats']['conversionRate']}%',
                    Icons.trending_up,
                    AppColors.accent,
                  ),
                  _buildKpiRow(
                    '–°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
                    '${(kpiData['financialStats']['averageCheck'] / 1000).toStringAsFixed(1)}K ‚ÇΩ',
                    Icons.receipt,
                    AppColors.warning,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏
            _buildRevenueBreakdown(kpiData['revenueBreakdown']),
            const SizedBox(height: 20),

            // –ë–æ–Ω—É—Å–Ω—ã–µ KPI
            _buildSection(
              title: 'üéØ –ë–æ–Ω—É—Å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏',
              child: Column(
                children: [
                  _buildKpiRow(
                    '–¢—É—Ä–Ω–∏—Ä—ã –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
                    '${kpiData['bonusKpi']['tournaments']}',
                    Icons.emoji_events,
                    AppColors.primary,
                  ),
                  _buildKpiRow(
                    '–†–∞–±–æ—Ç–∞ —Å —é–Ω–∏–æ—Ä–∞–º–∏',
                    '${kpiData['bonusKpi']['juniorWork']}',
                    Icons.school,
                    AppColors.success,
                  ),
                  _buildKpiRow(
                    '–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
                    '${kpiData['bonusKpi']['socialContent']}',
                    Icons.video_library,
                    AppColors.accent,
                  ),
                  _buildKpiRow(
                    '–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–∑—ã–≤—ã',
                    '${kpiData['bonusKpi']['positiveReviews']}',
                    Icons.thumb_up,
                    AppColors.warning,
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // –¶–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            _buildGoalsSection(kpiData['goals']),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }

  Widget _buildFinancialOverview(Map<String, dynamic> kpiData) {
    final overall = kpiData['overallStats'];
    return AppCard(
      padding: AppStyles.paddingLg,
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ–±–∑–æ—Ä',
                style: AppTextStyles.headline6.copyWith(
                  color: AppColors.textPrimary,
                ),
              ),
              Text(
                '–°–µ–Ω—Ç—è–±—Ä—å 2024',
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textSecondary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceAround,
            children: [
              _buildFinancialCard(
                '–í—ã—Ä—É—á–∫–∞',
                '${(overall['revenue'] / 1000).toStringAsFixed(0)}K ‚ÇΩ',
                AppColors.success,
                Icons.attach_money,
              ),
              _buildFinancialCard(
                'KPI',
                '${overall['totalKpi']}%',
                AppColors.primary,
                Icons.bar_chart,
              ),
              _buildFinancialCard(
                '–ó–∞–≥—Ä—É–∑–∫–∞',
                '${overall['workload']}%',
                AppColors.accent,
                Icons.work,
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildFinancialCard(String title, String value, Color color, IconData icon) {
    return Column(
      children: [
        Container(
          width: 50,
          height: 50,
          decoration: BoxDecoration(
            color: color.withOpacity(0.1),
            borderRadius: BorderRadius.circular(12),
          ),
          child: Icon(icon, size: 24, color: color),
        ),
        const SizedBox(height: 8),
        Text(
          value,
          style: AppTextStyles.headline6.copyWith(
            color: color,
            fontWeight: FontWeight.bold,
          ),
        ),
        Text(
          title,
          style: AppTextStyles.caption.copyWith(
            color: AppColors.textSecondary,
          ),
        ),
      ],
    );
  }

  Widget _buildMainKpiCards(Map<String, dynamic> kpiData) {
    final overall = kpiData['overallStats'];
    return Row(
      children: [
        Expanded(
          child: _buildKpiCard(
            '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
            '${overall['satisfaction']}/5',
            '‚≠ê ${overall['satisfaction']}',
            AppColors.accent,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildKpiCard(
            '–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å',
            '${overall['attendance']}%',
            'üë• ${overall['attendance']}%',
            AppColors.success,
          ),
        ),
        const SizedBox(width: 12),
        Expanded(
          child: _buildKpiCard(
            '–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤',
            '${kpiData['generalMetrics']['totalTrainings']}',
            'üèãÔ∏è ${kpiData['generalMetrics']['totalTrainings']}',
            AppColors.primary,
          ),
        ),
      ],
    );
  }

  Widget _buildKpiCard(String title, String value, String subtitle, Color color) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: AppStyles.borderRadiusLg,
        boxShadow: AppColors.shadowSm,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: AppTextStyles.caption.copyWith(
              color: AppColors.textSecondary,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            value,
            style: AppTextStyles.headline6.copyWith(
              color: color,
              fontWeight: FontWeight.bold,
            ),
          ),
          const SizedBox(height: 4),
          Text(
            subtitle,
            style: AppTextStyles.caption.copyWith(
              color: AppColors.textSecondary,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSection({required String title, required Widget child}) {
    return AppCard(
      padding: AppStyles.paddingLg,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: AppTextStyles.headline6.copyWith(
              color: AppColors.textPrimary,
            ),
          ),
          const SizedBox(height: 16),
          child,
        ],
      ),
    );
  }

  Widget _buildKpiRow(String title, String value, IconData icon, Color color) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        children: [
          Container(
            width: 36,
            height: 36,
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(icon, size: 18, color: color),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Text(
              title,
              style: AppTextStyles.bodyMedium.copyWith(
                color: AppColors.textPrimary,
              ),
            ),
          ),
          Text(
            value,
            style: AppTextStyles.bodyMedium.copyWith(
              color: color,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildProgressRow(String title, double progress, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                title,
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textPrimary,
                ),
              ),
              Text(
                value,
                style: AppTextStyles.caption.copyWith(
                  color: AppColors.textSecondary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          LinearProgressIndicator(
            value: progress,
            backgroundColor: AppColors.border,
            valueColor: AlwaysStoppedAnimation<Color>(
              progress >= 1 ? AppColors.success : AppColors.primary,
            ),
            minHeight: 6,
            borderRadius: AppStyles.borderRadiusSm,
          ),
        ],
      ),
    );
  }

  Widget _buildRevenueBreakdown(Map<String, dynamic> breakdown) {
    final total = breakdown.values.fold<int>(0, (sum, value) => sum + (value as int));
    return AppCard(
      padding: AppStyles.paddingLg,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üí∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏',
            style: AppTextStyles.headline6.copyWith(
              color: AppColors.textPrimary,
            ),
          ),
          const SizedBox(height: 16),
          _buildRevenueItem('–¢–µ–Ω–Ω–∏—Å', breakdown['tennis'], total, AppColors.primary),
          _buildRevenueItem('–¢—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª', breakdown['gym'], total, AppColors.success),
          _buildRevenueItem('–ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è', breakdown['group'], total, AppColors.accent),
          _buildRevenueItem('–ê–±–æ–Ω–µ–º–µ–Ω—Ç—ã', breakdown['memberships'], total, AppColors.warning),
        ],
      ),
    );
  }

  Widget _buildRevenueItem(String title, int value, int total, Color color) {
    final percentage = (value / total * 100).toInt();
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                title,
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textPrimary,
                ),
              ),
              Text(
                '${(value / 1000).toStringAsFixed(1)}K ‚ÇΩ ($percentage%)',
                style: AppTextStyles.bodyMedium.copyWith(
                  color: color,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          LinearProgressIndicator(
            value: value / total,
            backgroundColor: AppColors.border,
            valueColor: AlwaysStoppedAnimation<Color>(color),
            minHeight: 6,
            borderRadius: AppStyles.borderRadiusSm,
          ),
        ],
      ),
    );
  }

  Widget _buildGoalsSection(Map<String, dynamic> goals) {
    return AppCard(
      padding: AppStyles.paddingLg,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üéØ –¶–µ–ª–∏ –Ω–∞ –º–µ—Å—è—Ü',
            style: AppTextStyles.headline6.copyWith(
              color: AppColors.textPrimary,
            ),
          ),
          const SizedBox(height: 16),
          _buildGoalItem(
            '–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã',
            goals['monthlyClients']['current'],
            goals['monthlyClients']['target'],
            '–∫–ª–∏–µ–Ω—Ç–æ–≤',
          ),
          _buildGoalItem(
            '–í—ã—Ä—É—á–∫–∞',
            goals['monthlyRevenue']['current'],
            goals['monthlyRevenue']['target'],
            '‚ÇΩ',
          ),
          _buildGoalItem(
            '–†–µ–π—Ç–∏–Ω–≥',
            goals['satisfactionRating']['current'],
            goals['satisfactionRating']['target'],
            '–∑–≤–µ–∑–¥',
          ),
          _buildGoalItem(
            '–¢–µ–Ω–Ω–∏—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            goals['tennisTrainings']['current'],
            goals['tennisTrainings']['target'],
            '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
          ),
        ],
      ),
    );
  }

  Widget _buildGoalItem(String title, num current, num target, String unit) {
    final progress = current / target;
    final percentage = (progress * 100).toInt();

    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                title,
                style: AppTextStyles.bodyMedium.copyWith(
                  color: AppColors.textPrimary,
                ),
              ),
              Text(
                '$current/$target $unit',
                style: AppTextStyles.caption.copyWith(
                  color: AppColors.textSecondary,
                ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          LinearProgressIndicator(
            value: progress,
            backgroundColor: AppColors.border,
            valueColor: AlwaysStoppedAnimation<Color>(
              progress >= 1 ? AppColors.success : AppColors.primary,
            ),
            minHeight: 8,
            borderRadius: AppStyles.borderRadiusSm,
          ),
          const SizedBox(height: 4),
          Text(
            '$percentage%',
            style: AppTextStyles.caption.copyWith(
              color: progress >= 1 ? AppColors.success : AppColors.primary,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    );
  }
}